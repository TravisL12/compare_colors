{"version":3,"sources":["Color.js","deltaDistance.js","color-utils.js","ColorGrid.js","App.js","serviceWorker.js","index.js"],"names":["Color","props","style","backgroundColor","concat","color","hexColor","showTitle","react_default","a","createElement","className","rgbColor","join","data-color-idx","id","undefined","onClick","remove","defaultProps","rgb2lab","rgb","x","y","z","r","g","b","Math","pow","hex2dec","hex","slice","map","c","parseInt","createColor","colorObj","arguments","length","test","replace","split","num","Number","toString","distance","compare","labA","labB","deltaL","deltaA","deltaB","c1","sqrt","deltaC","deltaH","deltaLKlsl","deltaCkcsc","deltaHkhsh","i","deltaE","ColorGrid","state","compareColor","areColorsSorted","updateCompareColor","event","target","value","_this","setState","toggleSorting","currentTarget","_this$state","this","_this$props","colors","removeColor","sortedColors","sort","src_Color","type","onChange","placeholder","name","checked","htmlFor","idx","key","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateTextArea","colorInput","parseColors","re","RegExp","match","_ref","currentColors","colorObjects","resetDisplay","testColors","dataset","colorIdx","splice","newColors","rows","src_ColorGrid","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d9ecde7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Color(props) {\n  const style = {\n    backgroundColor: `#${props.color.hexColor}`,\n    color: `#${props.color.hexColor}`\n  };\n\n  const showTitle = props.showTitle && (\n    <div className=\"names\">\n      <p>#{props.color.hexColor}</p>\n      <p>rgb({props.color.rgbColor.join(\",\")})</p>\n    </div>\n  );\n\n  return (\n    <div className=\"color-container\">\n      <div\n        className={`square`}\n        style={style}\n        data-color-idx={props.color.id || undefined}\n        onClick={props.remove}\n      />\n      {showTitle}\n    </div>\n  );\n}\n\nColor.defaultProps = {\n  showTitle: true\n};\n\nexport default Color;\n","// Found at: https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function rgb2lab(rgb) {\n  let r = rgb[0] / 255;\n  let g = rgb[1] / 255;\n  let b = rgb[2] / 255;\n  let x, y, z;\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n  x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n  y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.0;\n  z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n\n  return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n}\n\n// calculate the perceptual distance between colors in CIELAB\n// https://github.com/THEjoezack/ColorMine/blob/master/ColorMine/ColorSpaces/Comparisons/Cie94Comparison.cs\n\nexport function deltaE(labA, labB) {\n  let deltaL = labA[0] - labB[0];\n  let deltaA = labA[1] - labB[1];\n  let deltaB = labA[2] - labB[2];\n\n  let c1 = Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]);\n  let c2 = Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]);\n\n  let deltaC = c1 - c2;\n  let deltaH = deltaA * deltaA + deltaB * deltaB - deltaC * deltaC;\n\n  deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\n\n  let sc = 1.0 + 0.045 * c1;\n  let sh = 1.0 + 0.015 * c1;\n\n  let deltaLKlsl = deltaL / 1.0;\n  let deltaCkcsc = deltaC / sc;\n  let deltaHkhsh = deltaH / sh;\n\n  let i =\n    deltaLKlsl * deltaLKlsl + deltaCkcsc * deltaCkcsc + deltaHkhsh * deltaHkhsh;\n\n  return i < 0 ? 0 : Math.sqrt(i);\n}\n","import { rgb2lab, deltaE } from \"./deltaDistance\";\n\n/**\n * @param {string} rgb color string => rgb(200, 150, 0)\n * @return {array} [200, 150, 0]\n */\nfunction dec2arrayValue(rgbColorStr) {\n  return rgbColorStr\n    .replace(/[rgb()\\s]/gi, \"\")\n    .split(\",\")\n    .map(num => parseInt(num, 10));\n}\n\n/**\n *\n * @param {array} array of ints ex: [210, 190, 5];\n */\nfunction dec2hex(rgbColor) {\n  return rgbColor\n    .map(c => {\n      const num = Number(c);\n      return `0${num.toString(16)}`.slice(-2);\n    })\n    .join(\"\");\n}\n\n/**\n *\n * @param {string} hex 6 character hex string w/o # ex: 'FF09A4'\n */\nexport function hex2dec(hex) {\n  const split = [hex.slice(0, 2), hex.slice(2, 4), hex.slice(4, 6)];\n\n  return split.map(c => {\n    return parseInt(c, 16);\n  });\n}\n\n/**\n * createColor - produce object that has RGB and hexadecimal\n * @param {string} color - rgba(200,150,0) or #ff00f0 value\n * @return {object} colorObj:\n * example:\n * {\n *    rgbColor: [200, 150, 0],\n *    hexColor: #C89600\n * }\n */\nexport function createColor(color, id = null) {\n  const isRgb = /^rgb/.test(color);\n  const colorObj = { id };\n\n  if (isRgb) {\n    colorObj.rgbColor = dec2arrayValue(color);\n    colorObj.hexColor = dec2hex(colorObj.rgbColor);\n  } else {\n    colorObj.hexColor = color.replace(/['#]/gi, \"\");\n    colorObj.rgbColor = hex2dec(colorObj.hexColor);\n  }\n\n  return colorObj;\n}\n\n/**\n * Based on calculation from:\n * https://en.wikipedia.org/wiki/Color_difference\n * @param {string} compare 6 character hex string w/o # ex: 'FF09A4'\n * @param {string} target 6 character hex string w/o # ex: 'FF09A4'\n * @return {float} returns distance between compare and target hex values\n */\nexport function distance(compare, target = \"000000\") {\n  const labA = rgb2lab(hex2dec(target));\n  const labB = rgb2lab(compare);\n  return deltaE(labA, labB);\n}\n","import React, { Component } from \"react\";\nimport Color from \"./Color\";\nimport { createColor, distance } from \"./color-utils\";\n\nclass ColorGrid extends Component {\n  state = {\n    compareColor: \"000000\",\n    areColorsSorted: false\n  };\n\n  updateCompareColor = event => {\n    const { hexColor } = createColor(event.target.value);\n    if (hexColor.length === 6) {\n      this.setState({ compareColor: hexColor });\n    } else if (event.target.value.length === 0) {\n      this.setState({ compareColor: \"000000\" });\n    }\n  };\n\n  toggleSorting = event => {\n    // target value is passed as a string\n    this.setState({ areColorsSorted: event.currentTarget.value === \"true\" });\n  };\n\n  render() {\n    const { areColorsSorted, compareColor } = this.state;\n    const { colors, removeColor } = this.props;\n    const sortedColors = areColorsSorted\n      ? colors.slice().sort((a, b) => {\n          return (\n            distance(a.rgbColor, compareColor) -\n            distance(b.rgbColor, compareColor)\n          );\n        })\n      : colors;\n\n    return (\n      <div className=\"compare-grid-container\">\n        <div className=\"compare-container\">\n          <div className=\"compare-input\">\n            <Color showTitle={false} color={createColor(compareColor)} />\n            <input\n              type=\"text\"\n              id=\"compare-color\"\n              onChange={this.updateCompareColor}\n              placeholder=\"#000000 (Default)\"\n            />\n          </div>\n          <div className=\"compare-controls\">\n            <p>Sort by closest match?</p>\n            <div className=\"controls\">\n              <input\n                type=\"radio\"\n                id=\"compare-on\"\n                name=\"sortOption\"\n                checked={areColorsSorted}\n                onChange={this.toggleSorting}\n                value={true}\n              />\n              <label htmlFor=\"compare-on\">On</label>\n\n              <input\n                type=\"radio\"\n                id=\"compare-off\"\n                name=\"sortOption\"\n                checked={!areColorsSorted}\n                onChange={this.toggleSorting}\n                value={false}\n              />\n              <label htmlFor=\"compare-off\">Off</label>\n            </div>\n          </div>\n        </div>\n        <div className=\"color-grid\">\n          {sortedColors.map((color, idx) => {\n            return <Color color={color} remove={removeColor} key={idx} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ColorGrid;\n","import React, { Component } from \"react\";\nimport ColorGrid from \"./ColorGrid\";\nimport \"./application.scss\";\nimport { createColor } from \"./color-utils\";\n\nconst test = `#353B4B\nff001E\nrgb(0, 0, 200)\n#3A3A48 0fa912\nrgb( 200 , 150 , 2 ) rgb(1,2,3)\n#232836\n#454E5F\n#ffffff\n#050505\n#e1e1e1\n#444444\n#999999\nhey I have a color #d928ae inside this sentence\n `;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      colorInput: \"\",\n      colors: []\n    };\n  }\n\n  updateTextArea = event => {\n    this.setState({ colorInput: event.target.value });\n  };\n\n  parseColors = () => {\n    if (this.state.colorInput) {\n      // Parse rgb(X, X, X) or #123456 (hex) patterns\n      const re = new RegExp(\n        /(rgb\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*\\)|#?([0-9]|[a-f]){6})/,\n        \"gi\"\n      );\n      const colors = this.state.colorInput.match(re);\n\n      if (colors) {\n        this.setState(({ colors: currentColors }) => {\n          const colorObjects = colors.map((color, idx) => {\n            const id = currentColors.length + idx + 1;\n            return createColor(color, id);\n          });\n\n          // TODO REMOVE DUPLICATES\n\n          return { colorInput: \"\", colors: currentColors.concat(colorObjects) };\n        });\n      }\n    }\n  };\n\n  resetDisplay = () => {\n    this.setState({\n      colorInput: \"\",\n      colors: []\n    });\n  };\n\n  testColors = () => {\n    this.setState(\n      {\n        colorInput: test\n      },\n      this.parseColors\n    );\n  };\n\n  removeColor = event => {\n    const id = event.target.dataset.colorIdx - 1; // ID is 1 indexed\n    const colors = this.state.colors;\n    colors.splice(id, 1);\n\n    // Remap ID's on remaining colors\n    const newColors = colors.map((color, idx) => {\n      color.id = idx + 1;\n      return color;\n    });\n\n    this.setState({ colors: newColors });\n  };\n\n  render() {\n    const { colors, colorInput } = this.state;\n\n    return (\n      <div className=\"app-container\">\n        <div className=\"col color-entry\">\n          <div className=\"title\">\n            <p>Enter/Paste colors (hex or rgb)</p>\n          </div>\n          <div className=\"display text-area\">\n            <textarea\n              className=\"color-textarea\"\n              rows=\"20\"\n              onChange={this.updateTextArea}\n              value={colorInput}\n            />\n            <button onClick={this.parseColors}>Convert</button>\n            <button onClick={this.resetDisplay}>Reset</button>\n            <button onClick={this.testColors}>Test</button>\n          </div>\n        </div>\n        <div className=\"col color-types\">\n          <div className=\"title\">\n            <p>Results ({colors.length})</p>\n          </div>\n          <div className=\"display results-display\">\n            <ColorGrid removeColor={this.removeColor} colors={colors} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}