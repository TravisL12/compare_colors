{"version":3,"sources":["deltaDistance.js","color-utils.js","Color.js","ColorGrid.js","App.js","serviceWorker.js","index.js"],"names":["rgb2lab","rgb","x","y","z","r","g","b","Math","pow","isColorRgb","color","test","dec2array","rgbColorStr","replace","split","map","num","parseInt","dec2hex","rgbColor","format2hex","c","Number","concat","toString","slice","join","hex2dec","hex","createColor","hexColor","id","arguments","length","undefined","hslColor","rgbArray","h","s","i","max","apply","Object","toConsumableArray","min","l","d","rgb2hsl","distanceDelta","compare","labA","labB","deltaL","deltaA","deltaB","c1","sqrt","deltaC","deltaH","deltaLKlsl","deltaCkcsc","deltaHkhsh","deltaE","distanceChromatic","cDec","tDec","red","green","blue","toUpperCase","copyText","event","target","textContent","style","backgroundColor","percent","percentHex","hexAlpha","setTimeout","inputEl","document","createElement","value","body","appendChild","select","execCommand","removeChild","Color","_ref","showTitle","remove","squareStyle","react_default","a","className","data-color-idx","onClick","defaultProps","ColorGrid","colors","removeColor","_useState","useState","_useState2","slicedToArray","compareColor","setCompareColor","_useState3","_useState4","areColorsSorted","setAreColorsSorted","_useState5","_useState6","sortMethod","setSortMethod","sortTypes","toggleSortMethod","_ref3","currentTarget","sortedColors","sort","src_Color","type","onChange","_ref2","placeholder","name","checked","htmlFor","idx","key","App","state","colorInput","updateTextArea","_this","setState","parseColors","matchedColors","re","RegExp","match","matchColors","existingHex","newColors","reduce","results","includes","push","resetDisplay","testColors","dataset","colorIdx","splice","_this$state","this","rows","src_ColorGrid","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96e9c5c6.chunk.js","sourcesContent":["// Found at: https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function rgb2lab(rgb) {\n  let r = rgb[0] / 255;\n  let g = rgb[1] / 255;\n  let b = rgb[2] / 255;\n  let x, y, z;\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n  x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n  y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.0;\n  z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n\n  return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n}\n\n// calculate the perceptual distance between colors in CIELAB\n// https://github.com/THEjoezack/ColorMine/blob/master/ColorMine/ColorSpaces/Comparisons/Cie94Comparison.cs\n\nexport function deltaE(labA, labB) {\n  let deltaL = labA[0] - labB[0];\n  let deltaA = labA[1] - labB[1];\n  let deltaB = labA[2] - labB[2];\n\n  let c1 = Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]);\n  let c2 = Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]);\n\n  let deltaC = c1 - c2;\n  let deltaH = deltaA * deltaA + deltaB * deltaB - deltaC * deltaC;\n\n  deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\n\n  let sc = 1.0 + 0.045 * c1;\n  let sh = 1.0 + 0.015 * c1;\n\n  let deltaLKlsl = deltaL / 1.0;\n  let deltaCkcsc = deltaC / sc;\n  let deltaHkhsh = deltaH / sh;\n\n  let i =\n    deltaLKlsl * deltaLKlsl + deltaCkcsc * deltaCkcsc + deltaHkhsh * deltaHkhsh;\n\n  return i < 0 ? 0 : Math.sqrt(i);\n}\n","import { rgb2lab, deltaE } from \"./deltaDistance\";\n\n/**\n *\n * @param {string} color\n * @returns {boolean}\n */\nfunction isColorRgb(color) {\n  return /^rgb/i.test(color);\n}\n\n/**\n * @param {string} rgb color string => rgb(200, 150, 0)\n * @return {array} [200, 150, 0]\n */\nfunction dec2array(rgbColorStr) {\n  return rgbColorStr\n    .replace(/[rgb()\\s]/gi, \"\")\n    .split(\",\")\n    .map(num => parseInt(num, 10));\n}\n\n/**\n *\n * @param {array | string}\n * array of ints ex: [210, 190, 5];\n * string ex: 'rgb(210, 190, 5)'\n */\nfunction dec2hex(rgbColor) {\n  let color = rgbColor;\n  if (typeof rgbColor === \"string\") {\n    color = dec2array(color);\n  }\n\n  const hex = color\n    .map(c => {\n      const num = Number(c);\n      return `0${num.toString(16)}`.slice(-2);\n    })\n    .join(\"\");\n\n  return format2hex(hex);\n}\n\n/**\n *\n * @param {string} hex 6 character hex string w/o # ex: 'FF09A4'\n */\nfunction hex2dec(hex) {\n  const split = [hex.slice(0, 2), hex.slice(2, 4), hex.slice(4, 6)];\n\n  return split.map(c => {\n    return parseInt(c, 16);\n  });\n}\n\n/**\n * createColor - produce object that has RGB and hexadecimal\n * @param {string} color - rgba(200,150,0) or #ff00f0 value\n * @return {object} colorObj:\n * example:\n * {\n *    rgbColor: [200, 150, 0],\n *    hexColor: #C89600\n * }\n */\nexport function createColor(color, id = null) {\n  let rgbColor;\n  let hexColor;\n  let hslColor;\n\n  if (isColorRgb(color)) {\n    rgbColor = dec2array(color);\n    hexColor = dec2hex(rgbColor);\n  } else {\n    hexColor = format2hex(color);\n    rgbColor = hex2dec(hexColor);\n  }\n\n  hslColor = rgb2hsl(rgbColor);\n\n  return { id, rgbColor, hexColor, hslColor };\n}\n\n/**\n * Based on calculation from:\n * https://en.wikipedia.org/wiki/Color_difference\n * @param {string} compare 6 character hex string w/o # ex: 'FF09A4'\n * @param {string} target 6 character hex string w/o # ex: 'FF09A4'\n * @return {float} returns distance between compare and target hex values\n */\nexport function distanceDelta(compare, target = \"000000\") {\n  const labA = rgb2lab(hex2dec(target));\n  const labB = rgb2lab(compare);\n  return deltaE(labA, labB);\n}\n\n/**\n *\n * @param {string} compare 6 character hex string w/o # ex: 'FF09A4'\n * @param {string} target 6 character hex string w/o # ex: 'FF09A4'\n * @return {float} returns distance between compare and target hex values\n */\nexport function distanceChromatic(compare = [0, 0, 0], target = \"000000\") {\n  const cDec = compare;\n  const tDec = hex2dec(target);\n\n  const red = Math.pow(tDec[0] - cDec[0], 2);\n  const green = Math.pow(tDec[1] - cDec[1], 2);\n  const blue = Math.pow(tDec[2] - cDec[2], 2);\n\n  return Math.sqrt(red + green + blue);\n}\n\n/**\n * Convert hex or decimal string to a hexadecimal alpha\n * @param {string} color\n * @param {float} percent opacity percentage\n */\nexport function hexAlpha(color, percent = 0.5) {\n  const percentHex = parseInt(percent * 100, 16);\n  return `${format2hex(color)}${percentHex}`;\n}\n\n/**\n * matchColors - Parse rgb(X, X, X) or #123456 (hex) patterns\n * @param {string} colorInput\n * @return {array} array of matched values\n */\nexport function matchColors(colorInput) {\n  const re = new RegExp(\n    /(rgb\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*\\)|#([0-9]|[a-f]){6})/,\n    \"gi\"\n  );\n\n  return colorInput.match(re);\n}\n\nexport function format2hex(color) {\n  const hex = isColorRgb(color) ? dec2hex(color) : color;\n  return hex.replace(/['#]/gi, \"\").toUpperCase();\n}\n\n// https://codepen.io/pankajparashar/pen/oFzIg\nfunction rgb2hsl(rgbArray) {\n  const rgb = rgbArray.map(i => i / 255);\n  const r = rgb[0];\n  const g = rgb[1];\n  const b = rgb[2];\n  const max = Math.max(...rgb);\n  const min = Math.min(...rgb);\n  var h,\n    s,\n    l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0;\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default:\n        h = 0;\n    }\n\n    h /= 6;\n  }\n\n  return [\n    (h * 100 + 0.5) | 0,\n    ((s * 100 + 0.5) | 0) + \"%\",\n    ((l * 100 + 0.5) | 0) + \"%\"\n  ];\n}\n\n// // https://www.w3schools.com/lib/w3color.js\n// export function rgb2hsl(rgbArray) {\n//   let rgb = rgbArray.map(i => {\n//     return i / 255;\n//   });\n//   console.log(rgb, \"hsl convert\");\n//   let min = rgb[0];\n//   let max = rgb[0];\n//   let maxcolor = 0;\n//   for (let i = 0; i < rgb.length - 1; i++) {\n//     if (rgb[i + 1] <= min) {\n//       min = rgb[i + 1];\n//     }\n//     if (rgb[i + 1] >= max) {\n//       max = rgb[i + 1];\n//       maxcolor = i + 1;\n//     }\n//   }\n\n//   let h;\n//   if (maxcolor === 0) {\n//     h = (rgb[1] - rgb[2]) / (max - min);\n//   }\n//   if (maxcolor === 1) {\n//     h = 2 + (rgb[2] - rgb[0]) / (max - min);\n//   }\n//   if (maxcolor === 2) {\n//     h = 4 + (rgb[0] - rgb[1]) / (max - min);\n//   }\n//   if (isNaN(h)) {\n//     h = 0;\n//   }\n//   h = h * 60;\n\n//   if (h < 0) {\n//     h = h + 360;\n//   }\n//   const l = (min + max) / 2;\n\n//   let s;\n//   if (min === max) {\n//     s = 0;\n//   } else {\n//     if (l < 0.5) {\n//       s = (max - min) / (max + min);\n//     } else {\n//       s = (max - min) / (2 - max - min);\n//     }\n//   }\n\n//   return [h, s, l];\n// }\n\n// // https://www.w3schools.com/lib/w3color.js\n// function hslToRgb(hue, sat, light) {\n//   var t1, t2, r, g, b;\n//   hue = hue / 60;\n//   if (light <= 0.5) {\n//     t2 = light * (sat + 1);\n//   } else {\n//     t2 = light + sat - light * sat;\n//   }\n//   t1 = light * 2 - t2;\n//   r = hueToRgb(t1, t2, hue + 2) * 255;\n//   g = hueToRgb(t1, t2, hue) * 255;\n//   b = hueToRgb(t1, t2, hue - 2) * 255;\n//   return { r: r, g: g, b: b };\n// }\n\n// // https://www.w3schools.com/lib/w3color.js\n// function hueToRgb(t1, t2, hue) {\n//   if (hue < 0) hue += 6;\n//   if (hue >= 6) hue -= 6;\n//   if (hue < 1) return (t2 - t1) * hue + t1;\n//   else if (hue < 3) return t2;\n//   else if (hue < 4) return (t2 - t1) * (4 - hue) + t1;\n//   else return t1;\n// }\n","import React from \"react\";\nimport { shape, array, string, number, bool, func } from \"prop-types\";\nimport { hexAlpha } from \"./color-utils\";\n\nfunction copyText(event) {\n  const { target } = event;\n  const { textContent } = target;\n\n  // Briefly have the element that was clicked glow with its color\n  // to confirm the string has been copied\n  target.style.backgroundColor = `#${hexAlpha(textContent)}`;\n  target.textContent = \"Copied!\";\n  setTimeout(() => {\n    target.style.backgroundColor = null;\n    target.textContent = textContent;\n  }, 250);\n\n  // Can only copy text from an HTMLInputElement\n  // Create an input, add the text to copy and remove input element\n  const inputEl = document.createElement(\"input\");\n  inputEl.value = textContent;\n  document.body.appendChild(inputEl);\n  inputEl.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(inputEl);\n}\n\nfunction Color({ color, showTitle, remove }) {\n  const { hexColor, rgbColor, hslColor, id } = color;\n\n  const squareStyle = {\n    backgroundColor: `#${hexColor}`,\n    color: `#${hexColor}`\n  };\n\n  return (\n    <div className=\"color-container\">\n      <div\n        className={`square`}\n        style={squareStyle}\n        data-color-idx={id}\n        onClick={remove}\n      />\n      {showTitle && (\n        <div className=\"names\">\n          <p onClick={copyText}>#{hexColor}</p>\n          <p onClick={copyText}>rgb({rgbColor.join(\",\")})</p>\n          <p onClick={copyText}>hsl({hslColor.join(\",\")})</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nColor.propTypes = {\n  color: shape({\n    hexColor: string.isRequired,\n    rgbColor: array.isRequired,\n    id: number\n  }).isRequired,\n  showTitle: bool,\n  remove: func\n};\n\nColor.defaultProps = {\n  color: { id: undefined },\n  showTitle: true,\n  remove: undefined\n};\n\nexport default Color;\n","import React, { useState } from \"react\";\nimport Color from \"./Color\";\nimport { createColor, distanceDelta, distanceChromatic } from \"./color-utils\";\n\nfunction ColorGrid({ colors, removeColor }) {\n  const [compareColor, setCompareColor] = useState(\"000000\");\n  const [areColorsSorted, setAreColorsSorted] = useState(false);\n  const [sortMethod, setSortMethod] = useState(\"distanceChromatic\");\n\n  const updateCompareColor = ({ target: { value } }) => {\n    const { hexColor } = createColor(value);\n    if (hexColor.length === 6) {\n      setCompareColor(hexColor);\n    } else if (value.length === 0) {\n      setCompareColor(\"000000\");\n    }\n  };\n\n  const sortTypes = {\n    distanceDelta,\n    distanceChromatic\n  };\n\n  // target value is passed as a string\n  const toggleSorting = () => {\n    setAreColorsSorted(!areColorsSorted);\n  };\n\n  // target value is passed as a string\n  const toggleSortMethod = ({ currentTarget: { value } }) => {\n    setSortMethod(value);\n  };\n\n  const sortedColors = areColorsSorted\n    ? colors\n        .slice()\n        .sort(\n          (a, b) =>\n            sortTypes[sortMethod](a.rgbColor, compareColor) -\n            sortTypes[sortMethod](b.rgbColor, compareColor)\n        )\n    : colors;\n\n  return (\n    <div className=\"compare-grid-container\">\n      <div className=\"compare-container\">\n        <div className=\"compare-input\">\n          <Color showTitle={false} color={createColor(compareColor)} />\n          <input\n            type=\"text\"\n            id=\"compare-color\"\n            onChange={updateCompareColor}\n            placeholder=\"#000000 (Default)\"\n          />\n        </div>\n        <div className=\"compare-controls\">\n          <p>Sort?</p>\n          <button onClick={toggleSorting}>\n            {areColorsSorted ? \"On\" : \"Off\"}\n          </button>\n          <p>Sorting Method?</p>\n          <div className=\"controls\">\n            <input\n              type=\"radio\"\n              id=\"compare-on\"\n              name=\"sortOption\"\n              checked={sortMethod === \"distanceChromatic\"}\n              onChange={toggleSortMethod}\n              value={\"distanceChromatic\"}\n            />\n            <label htmlFor=\"compare-on\">Chromatic</label>\n\n            <input\n              type=\"radio\"\n              id=\"compare-off\"\n              name=\"sortOption\"\n              checked={sortMethod === \"distanceDelta\"}\n              onChange={toggleSortMethod}\n              value={\"distanceDelta\"}\n            />\n            <label htmlFor=\"compare-off\">DeltaE</label>\n          </div>\n        </div>\n      </div>\n      <div className=\"color-grid\">\n        {sortedColors.map((color, idx) => {\n          return <Color color={color} remove={removeColor} key={idx} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ColorGrid;\n","import React, { Component } from \"react\";\nimport ColorGrid from \"./ColorGrid\";\nimport \"./application.scss\";\nimport { matchColors, createColor, format2hex } from \"./color-utils\";\n\nconst test = `\n#353B4B\n#ff001E\nrgb(0, 0, 200)\n#3A3A48 #0fa912\nrgb( 200 , 150 , 2 )\nrgb(1,2,3)\n#232836\n#454E5F\n#ffffff\n#050505\n#e1e1e1\n#444444\n#999999\nhey I have a color #d928ae inside this sentence\n `;\n\nclass App extends Component {\n  state = {\n    colorInput: \"\",\n    colors: []\n  };\n\n  updateTextArea = event => {\n    this.setState({ colorInput: event.target.value });\n  };\n\n  parseColors = () => {\n    if (!this.state.colorInput) {\n      return;\n    }\n\n    const matchedColors = matchColors(this.state.colorInput);\n\n    if (!matchedColors) {\n      return;\n    }\n\n    const existingHex = this.state.colors.map(({ hexColor }) => hexColor);\n    const filteredColors = matchedColors.reduce((results, color) => {\n      const hexColor = format2hex(color);\n\n      // No duplicates!\n      if (!existingHex.includes(hexColor) && !results.includes(hexColor)) {\n        results.push(hexColor);\n      }\n\n      return results;\n    }, []);\n\n    const newColors = filteredColors.map((color, idx) => {\n      const id = this.state.colors.length + idx + 1;\n      return createColor(color, id);\n    });\n\n    this.setState({\n      colorInput: \"\",\n      colors: [...this.state.colors, ...newColors]\n    });\n  };\n\n  resetDisplay = () => {\n    this.setState({\n      colorInput: \"\",\n      colors: []\n    });\n  };\n\n  testColors = () => {\n    this.setState(\n      {\n        colorInput: test\n      },\n      this.parseColors\n    );\n  };\n\n  removeColor = event => {\n    const id = event.target.dataset.colorIdx - 1; // Change ID from 1-idx -> 0-idx\n    const colors = this.state.colors;\n    colors.splice(id, 1);\n\n    // Remap ID's on remaining colors\n    const newColors = colors.map((color, idx) => {\n      color.id = idx + 1;\n      return color;\n    });\n\n    this.setState({ colors: newColors });\n  };\n\n  render() {\n    const { colors, colorInput } = this.state;\n\n    return (\n      <div className=\"app-container\">\n        <div className=\"col color-entry\">\n          <div className=\"title\">\n            <p>Enter/Paste colors (hex or rgb)</p>\n          </div>\n          <div className=\"display text-area\">\n            <textarea\n              className=\"color-textarea\"\n              rows=\"20\"\n              onChange={this.updateTextArea}\n              value={colorInput}\n            />\n            <button onClick={this.parseColors}>Convert</button>\n            <button onClick={this.resetDisplay}>Reset</button>\n            <button onClick={this.testColors}>Test</button>\n          </div>\n        </div>\n        <div className=\"col color-types\">\n          <div className=\"title\">\n            <p>Results ({colors.length})</p>\n          </div>\n          <div className=\"display results-display\">\n            <ColorGrid removeColor={this.removeColor} colors={colors} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}