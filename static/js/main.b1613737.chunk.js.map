{"version":3,"sources":["Color.js","deltaDistance.js","ColorGrid.js","App.js","serviceWorker.js","index.js"],"names":["Color","props","style","backgroundColor","concat","color","hexColor","showTitle","react_default","a","createElement","className","rgbColor","join","defaultProps","rgb2lab","rgb","x","y","z","r","g","b","Math","pow","ColorGrid","state","compareColor","areColorsSorted","createColor","colorObj","test","_this","dec2arrayValue","dec2hex","replace","hex2dec","rgbColorStr","split","map","num","parseInt","c","Number","toString","slice","hex","distance","compare","target","arguments","length","undefined","labA","labB","deltaL","deltaA","deltaB","c1","sqrt","deltaC","deltaH","deltaLKlsl","deltaCkcsc","deltaHkhsh","i","deltaE","updateCompareColor","event","value","setState","toggleSorting","currentTarget","_this2","this","_this$state","colorObjects","colors","sortedColors","sort","src_Color","type","id","onChange","placeholder","name","checked","htmlFor","idx","key","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateTextArea","colorInput","parseColors","re","RegExp","match","resetDisplay","rows","onClick","src_ColorGrid","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEA,SAASA,EAAMC,GACb,IAAMC,EAAQ,CACZC,gBAAe,IAAAC,OAAMH,EAAMI,MAAMC,UACjCD,MAAK,IAAAD,OAAMH,EAAMI,MAAMC,WAGnBC,EAAYN,EAAMM,WACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aAAKT,EAAMI,MAAMC,UACjBE,EAAAC,EAAAC,cAAA,gBAAQT,EAAMI,MAAMO,SAASC,KAAK,KAAlC,MAIJ,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,SAAYT,MAAOA,IAChCK,GAKPP,EAAMc,aAAe,CACnBP,WAAW,GAGEP,QCzBR,SAASe,EAAQC,GACtB,IAGIC,EAAGC,EAAGC,EAHNC,EAAIJ,EAAI,GAAK,IACbK,EAAIL,EAAI,GAAK,IACbM,EAAIN,EAAI,GAAK,IAejB,OAPAE,GAAS,OALTE,EAAIA,EAAI,OAAUG,KAAKC,KAAKJ,EAAI,MAAS,MAAO,KAAOA,EAAI,OAKrC,OAJtBC,EAAIA,EAAI,OAAUE,KAAKC,KAAKH,EAAI,MAAS,MAAO,KAAOA,EAAI,OAIxB,OAHnCC,EAAIA,EAAI,OAAUC,KAAKC,KAAKF,EAAI,MAAS,MAAO,KAAOA,EAAI,QAGd,EAC7CH,GAAS,MAAJC,EAAiB,MAAJC,EAAiB,MAAJC,GAAc,QAE7CL,GAJAA,GAAS,MAAJG,EAAiB,MAAJC,EAAiB,MAAJC,GAAc,QAIrC,QAAWC,KAAKC,IAAIP,EAAG,EAAI,GAAK,MAAQA,EAAI,GAAK,IAIlD,CAAC,KAHRC,EAAIA,EAAI,QAAWK,KAAKC,IAAIN,EAAG,EAAI,GAAK,MAAQA,EAAI,GAAK,KAGvC,GAAI,KAAOD,EAAIC,GAAI,KAAOA,GAF5CC,EAAIA,EAAI,QAAWI,KAAKC,IAAIL,EAAG,EAAI,GAAK,MAAQA,EAAI,GAAK,WC2I5CM,6MAxJbC,MAAQ,CACNC,aAAc,SACdC,iBAAiB,KAanBC,YAAc,SAAAxB,GACZ,IACMyB,EAAW,GAUjB,MAXc,OAAOC,KAAK1B,IAIxByB,EAASlB,SAAWoB,EAAKC,eAAe5B,GACxCyB,EAASxB,SAAW0B,EAAKE,QAAQJ,EAASlB,YAE1CkB,EAASxB,SAAWD,EAAM8B,QAAQ,SAAU,IAC5CL,EAASlB,SAAWoB,EAAKI,QAAQN,EAASxB,WAGrCwB,KAOTG,eAAiB,SAAAI,GACf,OAAOA,EACJF,QAAQ,cAAe,IACvBG,MAAM,KACNC,IAAI,SAAAC,GAAG,OAAIC,SAASD,EAAK,SAO9BN,QAAU,SAAAtB,GACR,OAAOA,EACJ2B,IAAI,SAAAG,GACH,IAAMF,EAAMG,OAAOD,GACnB,MAAO,IAAAtC,OAAIoC,EAAII,SAAS,KAAMC,OAAO,KAEtChC,KAAK,OAOVuB,QAAU,SAAAU,GAGR,MAFc,CAACA,EAAID,MAAM,EAAG,GAAIC,EAAID,MAAM,EAAG,GAAIC,EAAID,MAAM,EAAG,IAEjDN,IAAI,SAAAG,GACf,OAAOD,SAASC,EAAG,SAWvBK,SAAW,SAACC,GAA8C,IAArCC,EAAqCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA5BlB,EAAKN,MAAMC,aAGvC,ODvDG,SAAgB0B,EAAMC,GAC3B,IAAIC,EAASF,EAAK,GAAKC,EAAK,GACxBE,EAASH,EAAK,GAAKC,EAAK,GACxBG,EAASJ,EAAK,GAAKC,EAAK,GAExBI,EAAKnC,KAAKoC,KAAKN,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAGlDO,EAASF,EAFJnC,KAAKoC,KAAKL,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAGlDO,EAASL,EAASA,EAASC,EAASA,EAASG,EAASA,EAOtDE,EAAaP,EAAS,EACtBQ,EAAaH,GAJR,EAAM,KAAQF,GAKnBM,GAPJH,EAASA,EAAS,EAAI,EAAItC,KAAKoC,KAAKE,KAG3B,EAAM,KAAQH,GAMnBO,EACFH,EAAaA,EAAaC,EAAaA,EAAaC,EAAaA,EAEnE,OAAOC,EAAI,EAAI,EAAI1C,KAAKoC,KAAKM,GCgCpBC,CAFMnD,EAAQiB,EAAKI,QAAQa,IACrBlC,EAAQiC,OAIvBmB,mBAAqB,SAAAC,GAAS,IACpB9D,EAAa0B,EAAKH,YAAYuC,EAAMnB,OAAOoB,OAA3C/D,SACgB,IAApBA,EAAS6C,OACXnB,EAAKsC,SAAS,CAAE3C,aAAcrB,IACS,IAA9B8D,EAAMnB,OAAOoB,MAAMlB,QAC5BnB,EAAKsC,SAAS,CAAE3C,aAAc,cAIlC4C,cAAgB,SAAAH,GAEdpC,EAAKsC,SAAS,CAAE1C,gBAA+C,SAA9BwC,EAAMI,cAAcH,iFAG9C,IAAAI,EAAAC,KAAAC,EACmCD,KAAKhD,MAAvCE,EADD+C,EACC/C,gBAAiBD,EADlBgD,EACkBhD,aACnBiD,EAAeF,KAAKzE,MAAM4E,OAAOtC,IAAI,SAAAlC,GACzC,OAAOoE,EAAK5C,YAAYxB,KAGpByE,EAAelD,EACjBgD,EAAaG,KAAK,SAACtE,EAAGa,GACpB,OAAOmD,EAAK1B,SAAStC,EAAEG,UAAY6D,EAAK1B,SAASzB,EAAEV,YAErDgE,EAEJ,OACEpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACsE,EAAD,CAAOzE,WAAW,EAAOF,MAAOqE,KAAK7C,YAAYF,KACjDnB,EAAAC,EAAAC,cAAA,SACEuE,KAAK,OACLC,GAAG,gBACHC,SAAUT,KAAKP,mBACfiB,YAAY,sBAGhB5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,SACEuE,KAAK,QACLC,GAAG,aACHG,KAAK,aACLC,QAAS1D,EACTuD,SAAUT,KAAKH,cACfF,OAAO,IAET7D,EAAAC,EAAAC,cAAA,SAAO6E,QAAQ,cAAf,MAEA/E,EAAAC,EAAAC,cAAA,SACEuE,KAAK,QACLC,GAAG,cACHG,KAAK,aACLC,SAAU1D,EACVuD,SAAUT,KAAKH,cACfF,OAAO,IAET7D,EAAAC,EAAAC,cAAA,SAAO6E,QAAQ,eAAf,UAIN/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZmE,EAAavC,IAAI,SAAClC,EAAOmF,GACxB,OAAOhF,EAAAC,EAAAC,cAACsE,EAAD,CAAO3E,MAAOA,EAAOoF,IAAKD,eAjJrBE,aC+ETC,qBA/Db,SAAAA,IAAc,IAAA3D,EAAA,OAAA4D,OAAAC,EAAA,EAAAD,CAAAlB,KAAAiB,IACZ3D,EAAA4D,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAtB,QAOFuB,eAAiB,SAAA7B,GACfpC,EAAKsC,SAAS,CAAE4B,WAAY9B,EAAMnB,OAAOoB,SAT7BrC,EAYdmE,YAAc,WACZ,GAAInE,EAAKN,MAAMwE,WAAY,CACzB,IAAME,EAAK,IAAIC,OACb,wEACA,MAEIxB,EAAS7C,EAAKN,MAAMwE,WAAWI,MAAMF,GACvCvB,GACF7C,EAAKsC,SAAS,CAAEO,aApBR7C,EAyBduE,aAAe,WACbvE,EAAKsC,SAAS,CACZ4B,WAAY,GACZrB,OAAQ,MA1BV7C,EAAKN,MAAQ,CACXwE,WAAY,GACZrB,OAAQ,IAJE7C,wEAiCZ,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,6CAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,YACEC,UAAU,iBACV6F,KAAK,KACLrB,SAAUT,KAAKuB,eACf5B,MAAOK,KAAKhD,MAAMwE,aAEpB1F,EAAAC,EAAAC,cAAA,UAAQ+F,QAAS/B,KAAKyB,aAAtB,WACA3F,EAAAC,EAAAC,cAAA,UAAQ+F,QAAS/B,KAAK6B,cAAtB,WAGJ/F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACgG,EAAD,CAAW7B,OAAQH,KAAKhD,MAAMmD,mBAxDxBa,cCPEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASC,OAAOxG,EAAAC,EAAAC,cAACuG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1613737.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Color(props) {\n  const style = {\n    backgroundColor: `#${props.color.hexColor}`,\n    color: `#${props.color.hexColor}`\n  };\n\n  const showTitle = props.showTitle && (\n    <div className=\"names\">\n      <p>#{props.color.hexColor}</p>\n      <p>rgb({props.color.rgbColor.join(\",\")})</p>\n    </div>\n  );\n\n  return (\n    <div className=\"color-container\">\n      <div className={`square`} style={style} />\n      {showTitle}\n    </div>\n  );\n}\n\nColor.defaultProps = {\n  showTitle: true\n};\n\nexport default Color;\n","// Found at: https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function rgb2lab(rgb) {\n  let r = rgb[0] / 255;\n  let g = rgb[1] / 255;\n  let b = rgb[2] / 255;\n  let x, y, z;\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n  x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n  y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.0;\n  z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n\n  return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n}\n\n// calculate the perceptual distance between colors in CIELAB\n// https://github.com/THEjoezack/ColorMine/blob/master/ColorMine/ColorSpaces/Comparisons/Cie94Comparison.cs\n\nexport function deltaE(labA, labB) {\n  let deltaL = labA[0] - labB[0];\n  let deltaA = labA[1] - labB[1];\n  let deltaB = labA[2] - labB[2];\n\n  let c1 = Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]);\n  let c2 = Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]);\n\n  let deltaC = c1 - c2;\n  let deltaH = deltaA * deltaA + deltaB * deltaB - deltaC * deltaC;\n\n  deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\n\n  let sc = 1.0 + 0.045 * c1;\n  let sh = 1.0 + 0.015 * c1;\n\n  let deltaLKlsl = deltaL / 1.0;\n  let deltaCkcsc = deltaC / sc;\n  let deltaHkhsh = deltaH / sh;\n\n  let i =\n    deltaLKlsl * deltaLKlsl + deltaCkcsc * deltaCkcsc + deltaHkhsh * deltaHkhsh;\n\n  return i < 0 ? 0 : Math.sqrt(i);\n}\n","import React, { Component } from \"react\";\nimport Color from \"./Color\";\nimport { rgb2lab, deltaE } from \"./deltaDistance\";\n\nclass ColorGrid extends Component {\n  state = {\n    compareColor: \"000000\",\n    areColorsSorted: false\n  };\n\n  /**\n   * createColor - produce object that has RGB and hexadecimal\n   * @param {string} color - rgba(200,150,0) or #ff00f0 value\n   * @return {object} colorObj:\n   * example:\n   * {\n   *    rgbColor: [200, 150, 0],\n   *    hexColor: #C89600\n   * }\n   */\n  createColor = color => {\n    const isRgb = /^rgb/.test(color);\n    const colorObj = {};\n\n    if (isRgb) {\n      colorObj.rgbColor = this.dec2arrayValue(color);\n      colorObj.hexColor = this.dec2hex(colorObj.rgbColor);\n    } else {\n      colorObj.hexColor = color.replace(/['#]/gi, \"\");\n      colorObj.rgbColor = this.hex2dec(colorObj.hexColor);\n    }\n\n    return colorObj;\n  };\n\n  /**\n   * @param {string} rgb color string => rgb(200, 150, 0)\n   * @return {array} [200, 150, 0]\n   */\n  dec2arrayValue = rgbColorStr => {\n    return rgbColorStr\n      .replace(/[rgb()\\s]/gi, \"\")\n      .split(\",\")\n      .map(num => parseInt(num, 10));\n  };\n\n  /**\n   *\n   * @param {array} array of ints ex: [210, 190, 5];\n   */\n  dec2hex = rgbColor => {\n    return rgbColor\n      .map(c => {\n        const num = Number(c);\n        return `0${num.toString(16)}`.slice(-2);\n      })\n      .join(\"\");\n  };\n\n  /**\n   *\n   * @param {string} hex 6 character hex string w/o # ex: 'FF09A4'\n   */\n  hex2dec = hex => {\n    const split = [hex.slice(0, 2), hex.slice(2, 4), hex.slice(4, 6)];\n\n    return split.map(c => {\n      return parseInt(c, 16);\n    });\n  };\n\n  /**\n   * Based on calculation from:\n   * https://en.wikipedia.org/wiki/Color_difference\n   * @param {string} compare 6 character hex string w/o # ex: 'FF09A4'\n   * @param {string} target 6 character hex string w/o # ex: 'FF09A4'\n   * @return {float} returns distance between compare and target hex values\n   */\n  distance = (compare, target = this.state.compareColor) => {\n    const labA = rgb2lab(this.hex2dec(target));\n    const labB = rgb2lab(compare);\n    return deltaE(labA, labB);\n  };\n\n  updateCompareColor = event => {\n    const { hexColor } = this.createColor(event.target.value);\n    if (hexColor.length === 6) {\n      this.setState({ compareColor: hexColor });\n    } else if (event.target.value.length === 0) {\n      this.setState({ compareColor: \"000000\" });\n    }\n  };\n\n  toggleSorting = event => {\n    // target value is passed as a string\n    this.setState({ areColorsSorted: event.currentTarget.value === \"true\" });\n  };\n\n  render() {\n    const { areColorsSorted, compareColor } = this.state;\n    const colorObjects = this.props.colors.map(color => {\n      return this.createColor(color);\n    });\n\n    const sortedColors = areColorsSorted\n      ? colorObjects.sort((a, b) => {\n          return this.distance(a.rgbColor) - this.distance(b.rgbColor);\n        })\n      : colorObjects;\n\n    return (\n      <div className=\"compare-grid-container\">\n        <div className=\"compare-container\">\n          <div className=\"compare-input\">\n            <Color showTitle={false} color={this.createColor(compareColor)} />\n            <input\n              type=\"text\"\n              id=\"compare-color\"\n              onChange={this.updateCompareColor}\n              placeholder=\"Comparison Color\"\n            />\n          </div>\n          <div className=\"compare-controls\">\n            <p>Sort by closest match?</p>\n            <div className=\"controls\">\n              <input\n                type=\"radio\"\n                id=\"compare-on\"\n                name=\"sortOption\"\n                checked={areColorsSorted}\n                onChange={this.toggleSorting}\n                value={true}\n              />\n              <label htmlFor=\"compare-on\">On</label>\n\n              <input\n                type=\"radio\"\n                id=\"compare-off\"\n                name=\"sortOption\"\n                checked={!areColorsSorted}\n                onChange={this.toggleSorting}\n                value={false}\n              />\n              <label htmlFor=\"compare-off\">Off</label>\n            </div>\n          </div>\n        </div>\n        <div className=\"color-grid\">\n          {sortedColors.map((color, idx) => {\n            return <Color color={color} key={idx} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ColorGrid;\n","import React, { Component } from \"react\";\nimport ColorGrid from \"./ColorGrid\";\nimport \"./application.scss\";\n\n/** TEST COLORS\n#353B4B\nff001E\nrgb(0, 0, 200)\n#3A3A48 0fa912\nrgb( 200 , 150 , 2 ) rgb(1,2,3)\n#232836\n#454E5F\n#ffffff\n#050505\n#e1e1e1\n#444444\n#999999\n */\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      colorInput: \"\",\n      colors: []\n    };\n  }\n\n  updateTextArea = event => {\n    this.setState({ colorInput: event.target.value });\n  };\n\n  parseColors = () => {\n    if (this.state.colorInput) {\n      const re = new RegExp(\n        /(rgb\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*\\)|#?([0-9]|[a-f]){6})/,\n        \"gi\"\n      );\n      const colors = this.state.colorInput.match(re);\n      if (colors) {\n        this.setState({ colors });\n      }\n    }\n  };\n\n  resetDisplay = () => {\n    this.setState({\n      colorInput: \"\",\n      colors: []\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"col color-entry\">\n          <div className=\"title\">\n            <p>Enter/Paste colors (hex or rgb)</p>\n          </div>\n          <div className=\"display text-area\">\n            <textarea\n              className=\"color-textarea\"\n              rows=\"20\"\n              onChange={this.updateTextArea}\n              value={this.state.colorInput}\n            />\n            <button onClick={this.parseColors}>Convert</button>\n            <button onClick={this.resetDisplay}>Reset</button>\n          </div>\n        </div>\n        <div className=\"col color-types\">\n          <div className=\"title\">\n            <p>Results</p>\n          </div>\n          <div className=\"display results-display\">\n            <ColorGrid colors={this.state.colors} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}